{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","rawData","require","mainData1","map","items","mainData2","mainData3","store","Object","assign","resultObject","reduce","result","currentObject","key","hasOwnProperty","parseInt","value","console","log","arrObj","values","App","react_default","a","createElement","className","dataDetails","index","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0gpBCSlCC,eAAU,CALFC,EAAQ,IACRA,EAAQ,IACRA,EAAQ,MAUhBC,EAAYF,EAAQ,GAAGG,IAAI,SAACC,GAAD,OAAWA,IACtCC,EAAYL,EAAQ,GAAGG,IAAI,SAACC,GAAD,OAAWA,IACtCE,EAAYN,EAAQ,GAAGG,IAAI,SAACC,GAAD,OAAWA,IAExCG,EAAQ,GAEZA,EAAK,UAAiBC,OAAOC,OAAOF,EAAOL,GAC3CK,EAAK,UAAiBC,OAAOC,OAAOF,EAAOF,GAC3CE,EAAK,UAAiBC,OAAOC,OAAOF,EAAOD,GAE3C,IAAII,EAAeV,EAAQW,OAAO,SAASC,EAAQC,GACjD,IAAI,IAAIC,KAAOD,EAGPA,EAAcE,eAAeD,KAC7BF,EAAOE,GAAOD,EAAcC,IAG5BD,EAAcC,GAAKC,eAAe,WACpCH,EAAOE,GAAP,MAAuBE,SAASJ,EAAOE,GAAP,OAAwBE,SAASH,EAAcC,GAAKG,QAI1F,OAAOL,GACN,IAEHM,QAAQC,IAAI,mBAAmBT,GAE/B,IAAMU,EAASZ,OAAOa,OAAOX,GAE7BQ,QAAQC,IAAIC,OAmCGE,mLA9BX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAKhBN,EAAOjB,IAAI,SAACwB,EAAaC,GAEtB,OAAOL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBZ,IAAKc,GACrCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,cAASE,EAAW,YAEvBJ,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,yBAAH,IAA6BE,EAAW,WACxCJ,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6BAAH,IAAiCE,EAAW,SAAaE,QACzDN,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,+BAAH,IAAmCE,EAAW,qBAnBlDG,aCrCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.37da0e0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst Data1 = require('../src/data/Object1.json');\nconst Data2 = require('../src/data/Object2.json');\nconst Data3 = require('../src/data/Object3.json');\n\n\nconst rawData = [\n  Data1,\n  Data2,\n  Data3\n];\n\n\nconst mainData1 = rawData[0].map((items) => items);\nconst mainData2 = rawData[1].map((items) => items);\nconst mainData3 = rawData[2].map((items) => items);\n\nlet store = {};\n\nstore['mainData1'] =  Object.assign(store, mainData1);\nstore['mainData2'] =  Object.assign(store, mainData2);\nstore['mainData3'] =  Object.assign(store, mainData3);\n\nvar resultObject = rawData.reduce(function(result, currentObject) {\n  for(var key in currentObject) {\n    \n      // copy merge data\n      if (currentObject.hasOwnProperty(key)) {\n          result[key] = currentObject[key];\n      }\n      // find total value\n      if (currentObject[key].hasOwnProperty('value')) {\n        result[key]['value'] = parseInt(result[key]['value']) + parseInt(currentObject[key].value);\n    }\n\n  }\n  return result;\n}, {});\n\nconsole.log('total all data: ',resultObject);\n\nconst arrObj = Object.values(resultObject);\n\nconsole.log(arrObj)\n\n// console.log(mainData1)\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <body className=\"App\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <div className=\"main-list\">\n         \n          {/* {store.mainData1[0].item_code} */}\n            {/* <li key={}>{mainData.forEach( items => items )}</li> */}\n          {/* This is a working test below */}\n        {arrObj.map((dataDetails, index) => {\n            \n            return <div className=\"outer-container\" key={index}>{\n                    <div className=\"inner-container\">\n                      <p><strong>{dataDetails['item_text']}</strong></p>\n                      {/* {dataDetails['item_code']}&nbsp; */}\n                      <p><strong>Code : </strong> {dataDetails['item_code']}</p>\n                      <p><strong>Children : </strong> {dataDetails['children'].length}</p>\n                      <p><strong>Total value: </strong> {dataDetails['value']}</p>\n                    </div>                      \n                  }</div>\n          })}\n          </div>\n          \n        </body>\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}